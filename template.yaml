AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: |
  Collect resources from AWS accounts

Parameters:
  Domain:
    Type: String
    Description: 'Application Domain'

  System:
    Type: String
    Description: 'Application System'

  Component:
    Type: String
    Description: 'Application Component'

  CodeBranch:
    Type: String
    Description: "Name of deployment branch"

  CatalogEndpoint:
    Type: String
    Description: "Catalog endpoint"

  ClientId:
    Type: String
    Description: "Client ID"
    NoEcho: true

  ClientSecret:
    Type: String
    Description: "Client Secret"
    NoEcho: true

  CrossAccountRoleName:
    Type: String
    Description: "Cross account role name"

  AwsOrganizationId:
    Type: String
    Description: "AWS Organization ID"

Globals:
  Function:
    Runtime: python3.13
    MemorySize: 128
    Environment:
      Variables:
        POWERTOOLS_SERVICE_NAME: !Ref AWS::StackName
        POWERTOOLS_LOG_LEVEL: DEBUG

Resources:
  ###
  # List AWS accounts
  ###
  ListAccountsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/handlers/ListAccounts
      Handler: function.handler
      Description: List AWS accounts
      Timeout: 15
      Events:
        Schedule:
          Type: ScheduleV2
          Properties:
            OmitName: true  # Needed for feature bramnch deployment
            ScheduleExpression: rate(120 minutes)
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt ListAccountsSnsTopic.TopicName
        - AWSOrganizationsReadOnlyAccess
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref ListAccountsSnsTopic

  ListAccountsSnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: ListAccounts Destination


  ###
  # Process resources
  ###

  # Process accounts
  ProcessAccountSqsQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 120
      MessageRetentionPeriod: 300   # Go away before next invocation of ListAccountsFunction

  ProcessAccountSqsQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref ProcessAccountSqsQueue
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action: sqs:SendMessage
            Resource: !GetAtt ProcessAccountSqsQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !GetAtt ListAccountsSnsTopic.TopicArn

  ProcessAccountSubscribeQueueToTopic:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sqs
      TopicArn: !Ref ListAccountsSnsTopic
      Endpoint: !GetAtt ProcessAccountSqsQueue.Arn
      RawMessageDelivery: true

  ProcessAccountFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/handlers/ProcessAccount
      Handler: function.handler
      Description: process account entity
      Timeout: 5
      Environment:
        Variables:
          CATALOG_ENDPOINT: !Ref CatalogEndpoint
          CLIENT_ID: !Ref ClientId
          CLIENT_SECRET: !Ref ClientSecret
          SQS_QUEUE_URL: !GetAtt AddEntityToCatalogSqsQueue.QueueUrl
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt AddEntityToCatalogSqsQueue.QueueName
      Events:
        Sqs:
          Type: SQS
          Properties:
            Queue: !GetAtt ProcessAccountSqsQueue.Arn
            BatchSize: 1


  # Process ECS Clusters
  ProcessEcsClustersSqsQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 120
      MessageRetentionPeriod: 300   # Go away before next invocation of ListAccountsFunction

  ProcessEcsClustersSqsQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref ProcessEcsClustersSqsQueue
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action: sqs:SendMessage
            Resource: !GetAtt ProcessEcsClustersSqsQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !GetAtt ListAccountsSnsTopic.TopicArn

  ProcessEcsclustersSubscribeQueueToTopic:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sqs
      TopicArn: !Ref ListAccountsSnsTopic
      Endpoint: !GetAtt ProcessEcsClustersSqsQueue.Arn
      RawMessageDelivery: true

  ProcessEcsClustersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/handlers/ProcessEcsClusters
      Handler: function.handler
      Description: process ECS cluster entity
      Timeout: 5
      Environment:
        Variables:
          CROSS_ACCOUNT_IAM_ROLE_NAME: !Ref CrossAccountRoleName
          CATALOG_ENDPOINT: !Ref CatalogEndpoint
          CLIENT_ID: !Ref ClientId
          CLIENT_SECRET: !Ref ClientSecret
          SQS_QUEUE_URL: !GetAtt AddEntityToCatalogSqsQueue.QueueUrl
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt AddEntityToCatalogSqsQueue.QueueName
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - sts:AssumeRole
              Resource: !Sub arn:aws:iam::*:role/${CrossAccountRoleName}
      Events:
        Sqs:
          Type: SQS
          Properties:
            Queue: !GetAtt ProcessEcsClustersSqsQueue.Arn
            BatchSize: 1


  # Process VPCs
  ProcessVpcsSqsQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 120
      MessageRetentionPeriod: 300   # Go away before next invocation of ListAccountsFunction

  ProcessVpcsSqsQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref ProcessVpcsSqsQueue
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action: sqs:SendMessage
            Resource: !GetAtt ProcessVpcsSqsQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !GetAtt ListAccountsSnsTopic.TopicArn

  ProcessVpcsSubscribeQueueToTopic:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sqs
      TopicArn: !Ref ListAccountsSnsTopic
      Endpoint: !GetAtt ProcessVpcsSqsQueue.Arn
      RawMessageDelivery: true

  ProcessVpcsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/handlers/ProcessVpcs
      Handler: function.handler
      Description: Process VPCs
      Timeout: 5
      Environment:
        Variables:
          CROSS_ACCOUNT_IAM_ROLE_NAME: !Ref CrossAccountRoleName
          CATALOG_ENDPOINT: !Ref CatalogEndpoint
          CLIENT_ID: !Ref ClientId
          CLIENT_SECRET: !Ref ClientSecret
          SQS_QUEUE_URL: !GetAtt AddEntityToCatalogSqsQueue.QueueUrl
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt AddEntityToCatalogSqsQueue.QueueName
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - sts:AssumeRole
              Resource: !Sub arn:aws:iam::*:role/${CrossAccountRoleName}
      Events:
        Sqs:
          Type: SQS
          Properties:
            Queue: !GetAtt ProcessVpcsSqsQueue.Arn
            BatchSize: 1


  # Process S3 Buckets
  TransformS3BucketEventToEntityFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/handlers/TransformS3BucketEventToEntity
      Handler: function.handler
      Description: Process S3 buckets
      Timeout: 5
      Environment:
        Variables:
          CROSS_ACCOUNT_IAM_ROLE_NAME: !Ref CrossAccountRoleName
          CATALOG_ENDPOINT: !Ref CatalogEndpoint
          CLIENT_ID: !Ref ClientId
          CLIENT_SECRET: !Ref ClientSecret
          SQS_QUEUE_URL: !GetAtt AddEntityToCatalogSqsQueue.QueueUrl
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt AddEntityToCatalogSqsQueue.QueueName
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - sts:AssumeRole
              Resource: !Sub arn:aws:iam::*:role/${CrossAccountRoleName}
      Events:
        EventBridgeRule:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - "aws.s3"
              detail:
                eventName:
                  - "CreateBucket"
                  - "DeleteBucket"
            EventBusName: !Ref AwsResourceCollectorBus
      EventInvokeConfig:
        DestinationConfig:
          OnSuccess:
            Type: EventBridge
            Destination: !GetAtt AwsResourceCollectorBus.Arn

  ###
  # Add to Catalog
  ###
  AddEntityToCatalogSqsQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 120
      MessageRetentionPeriod: 300   # Go away before next invocation of ListAccountsFunction

  AddEntityToCatalogFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/handlers/AddEntityToCatalog
      Handler: function.handler
      Description: Add entity to catalog
      Timeout: 5
      Environment:
        Variables:
          CATALOG_ENDPOINT: !Ref CatalogEndpoint
          CLIENT_ID: !Ref ClientId
          CLIENT_SECRET: !Ref ClientSecret
      Events:
        EventBridge:
          Type: EventBridgeRule
          Properties:
            InputPath: "$.detail"
            Pattern:
              detail:
                $or:
                  - responsePayload:
                      apiVersion:
                        - "backstage.io/v1alpha1"
                      spec:
                        lifecycle:
                          - "created"
                  - apiVersion:
                      - "backstage.io/v1alpha1"
                    spec:
                      lifecycle:
                        - "created"
            EventBusName: !Ref AwsResourceCollectorBus
  ###@
  # Remove from Catalog
  ###
  RemoveEntityFromCatalogSqsQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 120
      MessageRetentionPeriod: 300   # Go away before next invocation of ListAccountsFunction

  RemoveEntityFromCatalogFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/handlers/RemoveEntityFromCatalog
      Handler: function.handler
      Description: Remove entity from catalog
      Timeout: 5
      Environment:
        Variables:
          CATALOG_ENDPOINT: !Ref CatalogEndpoint
          CLIENT_ID: !Ref ClientId
          CLIENT_SECRET: !Ref ClientSecret
      Events:
        EventBridge:
          Type: EventBridgeRule
          Properties:
            Pattern:
              detail:
                $or:
                  - responsePayload:
                      apiVersion:
                        - "backstage.io/v1alpha1"
                      spec:
                        lifecycle:
                          - "deleted"
                  - apiVersion:
                      - "backstage.io/v1alpha1"
                    spec:
                      lifecycle:
                        - "deleted"
            EventBusName: !Ref AwsResourceCollectorBus

  ###
  # Eventbus
  ###
  AwsResourceCollectorDlq:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 1209600 # 14 days
      VisibilityTimeout: 300 # 5 minutes

  AwsResourceCollectorDlqPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref AwsResourceCollectorDlq
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sqs:SendMessage
            Resource: !GetAtt AwsResourceCollectorDlq.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !GetAtt AwsResourceCollectorBus.Arn

  AwsResourceCollectorBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub "${AWS::StackName}-AwsResourceCollectorBus"
      Policy:
        Version: '2012-10-17'
        Statement:
          - Sid: CrossAccountAllowPutEvents
            Effect: Allow
            Principal: '*'
            Action:
              - events:PutEvents
            Resource: "*"
            Condition:
              StringEquals:
                "aws:PrincipalOrgID": !Ref AwsOrganizationId
      DeadLetterConfig:
        Arn: !GetAtt AwsResourceCollectorDlq.Arn
